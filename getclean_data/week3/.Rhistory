swirl()
library("swirl")
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Getting_and_Cleaning_Data")
install_from_swirl("Data_Analysis")
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
?read.csv
mydf
mydf <- read.csv(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
swirl
import swirl
sample(1:5)
sample(1:5)
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X
X[, "var1"]
X$var1
X[X$var2>8,]
which(X$var2>8)
install.packages("plyr")
library(plyr)
arrange(X, var1) #this will do the same thing as what we were doing above
arrange(X, desc(var1))
#You can also add columns into dataframes very easily
X$var4 <- rnorm(5) #var4 did not exist before this time. It's pretty easy!
#there are also the "bind" commands
#examples
Y <- cbind(X, rnorm(5)) #this binds the rnorm(5) to the right of X, you can switch it around if you want it on the left most column
Z <- rbind(Y, rnorm(5)) #this will bind the rnorm as the last row
Z
source('~/.active-rstudio-document', echo=TRUE)
tail(restData, n=3)
summary(restData)
quantile(restData$councilDistrict, probs = c(.1, .2, .3, .4, .5, .6, .7, .8, .9, 1))
var <- c(1, 23, 24, 25, 26, 26, 27,27,28,28,28,28,28,29,29,29,29,35)
quantile(var)
restData[restData$zipCode %in% c("21212", "21213"),]
data("UCBAdmissions")
DF = as.data.frame(UCBAdmissions)
xt <- (Freq ~ Gender + Admit, data=DF)
xt
xt <- (Freq ~ Gender + Admit,data=DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
object.size(restData)
object.size(restData)/1024
setwd("/Users/cfaw/datasciencecoursera/getclean_data/week3")
restData <- read.csv("./data/restaurants.csv")
x <- c(1, 3, 4, 25, 100); seq(along = x)
x
restData$nearMe <- restData$neighborhood %in% c("Roland Park", "Homeland")
restData$nearMe
table(restData$nearMe)
restData$zipWrong <- ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong, restData$zipCode < 0)
restData$zipWrong <- ifelse(restData$zipCode < 0, 1, 0)
table(restData$zipWrong, restData$zipCode < 0)
restData$zipWrong <- ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong, restData$zipCode < 0)
restData$zipGroups <- cut(restData$zipCode, breaks=quantiles(restData$zipCode)) #what this is doing is splitting them all up by the quantiles that they fall into.
table(restData$zipGroups)
restData$zipGroups <- cut(restData$zipCode, breaks=quantile(restData$zipCode)) #what this is doing is splitting them all up by the quantiles that they fall into.
table(restData$zipGroups)
restData$zipGroups
restData$zipGroups[1]
typeof(restData$zipGroups[1])
restData$zipGroups[1] + 1
table(restData$zipGroups)
dat = c(1, 10)
quantile(dat)
dat = c(0, 10)
quantile(dat)
dat = c(0, 2, 3, 5, 5, 5, 5, 6, 7, 10)
quantile(dat)
table(restData$zipGroups)
table(restData$zipGroups, restData$zipCode)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
restData$zipGroups <- cut2(restData$zipCode, g=4)
table(restData$zipGroups)
restData$zcf <- factor(restData$zipCode)
restData$zcf
yesno <- sample(c("yes", "no"),size=10,replace=TRUE)
yesnofac <- factor(yesno, levels=c("yes", "no"))
relevel(yesnofac, ref="yes")
restData2 <- mutate(restData, zipGroups=cut2(zipCode, g=4))
table(restData2$zipGroups)
as.numeric(restData$zipGroups)
library(reshape2)
head(mtcars)
mtcars <- rownames(mtcars)
carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
head(carMelt, n=3)
tail(carMelt, n=3)
head(carMelt, n=3)
head(mtcars)
mtcars
mtcars["Ferrari Dino"]
mtcars[1]
type(mtcars[1])
mtcars[1].type()
typeof(mtcars[1])
