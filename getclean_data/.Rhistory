packageVersion("swirl")
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
install_from_swirl("Getting and Cleaning Data")
setwd("/Users/cfaw/datasciencecoursera/getclean_data")
#this is how you check for files and directories existing. If you want to look for a file then change "dir" to "file"
if(!dir.exists("data")){
dir.create("data")
}
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL, destfile="./data/IdahoDataQuiz.csv", method="curl")
setwd("/Users/cfaw/datasciencecoursera/getclean_data")
library(data.table)
#this is how you check for files and directories existing. If you want to look for a file then change "dir" to "file"
if(!dir.exists("data")){
dir.create("data")
}
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL, destfile="./data/IdahoDataQuiz.csv", method="curl")
housingData <- fread("./data/IdahoDataQuiz.csv", sep=",", header=TRUE)
housingData
tables()
housingData[housingData$VAL == 24]
housingData[housingData$VAL == 24]$RT
housingData[housingData$VAL == 24]$RT[, .N, by=RT]
housingData[housingData$VAL == 24][, .N, by=RT]
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileURL, destfile="./data/NatGasQuiz.xlsx", method="curl")
#I am supposed to read in only rows 18-23 and columns 7-15 from the excel sheet, so here is how it works
colIndex = 7:15
rowIndex = 18:23
read.xlsx("./data/NatGasQuiz.xlsx", sheetIndex=1, colIndex=colIndex, rowIndex=rowIndex,header=TRUE)
#then I am supposed to run this next piece of code and see what the result is:
sum(dat$Zip*dat$Ext,na.rm=T)
colIndex = 7:15
rowIndex = 18:23
dat <- read.xlsx("./data/NatGasQuiz.xlsx", sheetIndex=1, colIndex=colIndex, rowIndex=rowIndex,header=TRUE)
#then I am supposed to run this next piece of code and see what the result is:
sum(dat$Zip*dat$Ext,na.rm=T)
library(xlsx)
colIndex = 7:15
rowIndex = 18:23
dat <- read.xlsx("./data/NatGasQuiz.xlsx", sheetIndex=1, colIndex=colIndex, rowIndex=rowIndex,header=TRUE)
#then I am supposed to run this next piece of code and see what the result is:
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
xmlURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(xmlURL, useInternal=TRUE)
rootNode <- xmlRoot(doc)
doc <- xmlTreeParse(xmlURL, useInternal=TRUE)
xmlURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(xmlURL, useInternal=TRUE)
rootNode <- xmlRoot(doc)
rootNode
xpathSApply(rootNode, "//zipcode", xmlValue==21231)
xpathSApply(rootNode, "//zipcode", xmlValue)
a <- xpathSApply(rootNode, "//zipcode", xmlValue)
sum(a == 21231)
DT <- housingData
print("Option A")
system.time(mean(DT$pwgtp15,by=DT$SEX))
print("Option B")
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
print("Option C")
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
print("Option D")
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
print("Option E")
tapply(DT$pwgtp15,DT$SEX,mean)
print("Option F")
DT[,mean(pwgtp15),by=SEX]
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileURL, destfile="./data/IdahoDataQuiz2.csv", method="curl")
DT <- fread("./data/IdahoDataQuiz2.csv", sep=",", header=TRUE)
print("Option A")
system.time(mean(DT$pwgtp15,by=DT$SEX))
print("Option B")
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
print("Option C")
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
print("Option D")
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
print("Option E")
tapply(DT$pwgtp15,DT$SEX,mean)
print("Option F")
DT[,mean(pwgtp15),by=SEX]
print("Option A")
system.time(mean(DT$pwgtp15,by=DT$SEX))
print("Option B")
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
print("Option C")
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
print("Option D")
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
print("Option E")
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
print("Option F")
system.time(DT[,mean(pwgtp15),by=SEX])
print("Option A")
system.time(mean(DT$pwgtp15,by=DT$SEX))
print("Option B")
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
print("Option C")
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
print("Option D")
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
print("Option E")
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
print("Option F")
system.time(DT[,mean(pwgtp15),by=SEX])
